/*
 * -----LICENSE START-----
 * JSHManager - A Java-based tool for managing one's ScoreHero account.
 * Copyright (C) 2008 Tim Mullin
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * -----LICENSE END-----
*/
/*
 * ProgressLogPanel.java
 *
 * Created on September 28, 2008, 6:18 PM
 */

package jshm.gui.components;

import java.awt.Container;
import java.awt.EventQueue;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import org.netbeans.spi.wizard.ResultProgressHandle;

/**
 *
 * @author  Tim
 */
public class ProgressLogPanel extends javax.swing.JPanel implements ResultProgressHandle {

    /** Creates new form ProgressLogPanel */
    public ProgressLogPanel() {
        initComponents();
    }
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        progBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgList = new javax.swing.JList();

        statusLabel.setText("Please wait...");

        progBar.setIndeterminate(true);

        msgList.setModel(new DefaultListModel());
        msgList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(msgList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList msgList;
    private javax.swing.JProgressBar progBar;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

	
	    // implement org.netbeans.spi.wizard.ResultProgressHandle
    
	@Override
	public void addProgressComponents(Container panel) {
		// ignore
	}

	@Override
	public void failed(String message, boolean canNavigateBack) {
		// ignore
	}

	public void finished() {
		finished(null);
	}
	
	@Override
	public void finished(Object result) {
		// nothing
	}

	@Override
	public boolean isRunning() {
		// not really used
		return true;
	}

	@Override
	public void setBusy(String description) {
		log(description);
		setProgress(true, -1, -1);
	}

	@Override
	public void setProgress(int currentStep, int totalSteps) {
		setProgress(false, currentStep, totalSteps);
	}
	
	public void setProgress(final boolean indeterminate, final int currentStep, final int totalSteps) {
		if (!SwingUtilities.isEventDispatchThread()) {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					setProgress(indeterminate, currentStep, totalSteps);
				}
			});
			
			return;
		}
		
		progBar.setIndeterminate(indeterminate);
		
		if (!indeterminate) {
			progBar.setMinimum(0);
			progBar.setMaximum(totalSteps);
			progBar.setValue(currentStep);
		}
	}

	@Override
	public void setProgress(String description, int currentStep, int totalSteps) {
		log(description);
		setProgress(currentStep, totalSteps);
	}

	public void setStatus(final String description) {
		if (!SwingUtilities.isEventDispatchThread()) {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					setStatus(description);
				}
			});
			
			return;
		}
		
		statusLabel.setText(description);
	}
	
	String lastMsg = "";
	
	public void log(final String msg) {
		if (lastMsg.equals(msg)) return;
		lastMsg = msg;
//		setStatus(msg);
		addMessage(msg);
	}
	
	public void addMessage(final String msg) {
		if (EventQueue.isDispatchThread()) {
			((DefaultListModel) msgList.getModel()).addElement(msg);
			msgList.ensureIndexIsVisible(msgList.getModel().getSize() - 1);
		} else {
			EventQueue.invokeLater(new Runnable() {
				@Override
				public void run() {
					addMessage(msg);
				}
			});
		}
	}
}
