/*
 * ImageViewer.java
 *
 * Created on September 5, 2008, 10:46 PM
 */

package jshm.gui;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.net.MalformedURLException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author  Tim
 */
public class ImageViewer extends javax.swing.JFrame {
	ImagePainter imagePainter = new ImagePainter();
	BufferedImage image = null;
	float scale = 1f;
	
    /** Creates new form ImageViewer */
    public ImageViewer() {
        initComponents();
        
        imagePainter.addMouseWheelListener(new MouseWheelListener() {
			public void mouseWheelMoved(MouseWheelEvent e) {
				if (e.isControlDown()) {
					if (e.getWheelRotation() < 0) {
						zoomInButtonActionPerformed(null);
					} else {
						zoomOutButtonActionPerformed(null);
					}
					
					e.consume();
				} else {
					imageScrollPane.dispatchEvent(e);
				}
			}
        });
        
        ActionMap aMap = getRootPane().getActionMap();
        aMap.put("imageZoomIn", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				zoomInButtonActionPerformed(e);
			}
        });
        aMap.put("imageZoomOut", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				zoomOutButtonActionPerformed(e);
			}
        });
        InputMap inMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_DOWN_MASK), "imageZoomIn");
        inMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_DOWN_MASK), "imageZoomOut");
    }

	public void setText(String text) {
		if (null == text || text.isEmpty()) {
			Container cp = getContentPane();
			cp.remove(jSplitPane1);
			cp.add(imageScrollPane, BorderLayout.CENTER);
			cp.validate();
			textPane.setText("");
		} else {
			if (textPane.getText().isEmpty()) {
				jSplitPane1.setBottomComponent(imageScrollPane);
				Container cp = getContentPane();
				cp.remove(imageScrollPane);
				cp.add(jSplitPane1, BorderLayout.CENTER);
				cp.validate();	
			}
			
			textPane.setText(text);
		}
	}
	
	public void setImage(String url) {
		try {
			setImage(new URL(url));
		} catch (MalformedURLException e) {
			setImage((Image) null);
			e.printStackTrace();
		}
	}
	
	public void setImage(final URL url) {
		if (null == url) {
			setImage((Image) null);
			return;
		}
		
		new Thread(new Runnable() {
			public void run() {
				try {
					final BufferedImage im = ImageIO.read(url);
					
					SwingUtilities.invokeLater(new Runnable() {
						public void run() {
							setImage(im);
						}
					});
				} catch (Exception e) {
					setImage((Image) null);
				}
			}
		}).start();
	}
	
	public void setImage(ImageIcon icon) {
		setImage(icon.getImage());
	}
	
	public void setImage(Image image) {
		if (null == image) {
			this.image = null;
		} else if (image instanceof BufferedImage) {
			this.image = (BufferedImage) image;
		} else {
			this.image = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
			this.image.getGraphics().drawImage(image, 
				0, 0, this.image.getWidth(), this.image.getHeight(), 
				0, 0, this.image.getWidth(), this.image.getHeight(), null);
		}
		
		scale = 1f;
		getContentPane().validate();
		imagePainter.repaint();
	}
	
	private void resizeImage(float scale) {
		if (image != null && this.scale != scale) {
			this.scale = scale;
			imageScrollPane.getViewport().revalidate();
			imageScrollPane.revalidate();
			imageScrollPane.repaint();
		}
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        imageScrollPane = new JScrollPane(imagePainter);
        jPanel1 = new javax.swing.JPanel();
        closeButtonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        controlsPanel = new javax.swing.JPanel();
        zoomInButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        zoomSlider = new javax.swing.JSlider();
        zoomLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Image Viewer");

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        textPane.setEditable(false);
        textPane.setText("The JSHManager Splash Logo");
        jScrollPane2.setViewportView(textPane);

        jSplitPane1.setLeftComponent(jScrollPane2);

        imageScrollPane.getVerticalScrollBar().setUnitIncrement(50);
        jSplitPane1.setBottomComponent(imageScrollPane);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closeButtonPanel.add(closeButton);

        jPanel1.add(closeButtonPanel, java.awt.BorderLayout.SOUTH);

        zoomInButton.setText("+");
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(zoomInButton);

        resetButton.setText("=");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(resetButton);

        zoomOutButton.setText("-");
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        controlsPanel.add(zoomOutButton);

        zoomSlider.setMaximum(500);
        zoomSlider.setMinimum(50);
        zoomSlider.setPaintLabels(true);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setValue(100);
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });
        controlsPanel.add(zoomSlider);

        zoomLabel.setText("100%");
        controlsPanel.add(zoomLabel);

        jPanel1.add(controlsPanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
	this.dispose();
}//GEN-LAST:event_closeButtonActionPerformed

private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
	zoomLabel.setText(zoomSlider.getValue() + "%");
	if (!zoomSlider.getValueIsAdjusting()) {
		resizeImage(zoomSlider.getValue() / 100f);
	}
}//GEN-LAST:event_zoomSliderStateChanged

private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
	int newScale = Math.min(zoomSlider.getValue() + 25, zoomSlider.getMaximum());
	zoomSlider.setValue(newScale);
}//GEN-LAST:event_zoomInButtonActionPerformed

private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
	int newScale = Math.max(zoomSlider.getValue() - 25, zoomSlider.getMinimum());
	zoomSlider.setValue(newScale);
}//GEN-LAST:event_zoomOutButtonActionPerformed

private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
	zoomSlider.setValue(100);
}//GEN-LAST:event_resetButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
				try {
					// Set the Look & Feel to match the current system
					UIManager.setLookAndFeel(
						UIManager.getSystemLookAndFeelClassName());
				} catch (Exception e) {
					System.out.println("Couldn't set system look & feel (not fatal)");
				}
				
            	ImageViewer iv = new ImageViewer();
            	iv.setLocationRelativeTo(null);
            	iv.setVisible(true);
            	iv.setText(null);
            	iv.setImage("http://i24.photobucket.com/albums/c45/bbloot/CherubRock.gif");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel closeButtonPanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextPane textPane;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JLabel zoomLabel;
    private javax.swing.JButton zoomOutButton;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables

    
    class ImagePainter extends JComponent {
    	public ImagePainter() {
    		setOpaque(true);
    		setBackground(Color.BLACK);
    		
    		// make this draggable
    		MouseInputAdapter mia = new MouseInputAdapter() {
    			int xDiff, yDiff;

//    			boolean isDragging;

    			Container c;

    			public void mouseDragged(MouseEvent e) {
    				c = getParent();
    				if (c instanceof JViewport) {
    					JViewport jv = (JViewport) c;
    					Point p = jv.getViewPosition();
    					int newX = p.x - (e.getX() - xDiff);
    					int newY = p.y - (e.getY() - yDiff);

    					int maxX = getWidth() - jv.getWidth();
    					int maxY = getHeight() - jv.getHeight();
    					if (newX < 0) newX = 0;
    					if (newX > maxX) newX = maxX;
    					if (newY < 0) newY = 0;
    					if (newY > maxY) newY = maxY;

    					jv.setViewPosition(new Point(newX, newY));
    				}
    			}

    			public void mousePressed(MouseEvent e) {
    				setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    				xDiff = e.getX();
    				yDiff = e.getY();
    			}

    			public void mouseReleased(MouseEvent e) {
    				setCursor(null);
    			}
    		};

    		addMouseMotionListener(mia);
    		addMouseListener(mia);
    	}
    	
    	final Dimension MIN_SIZE = new Dimension(400, 300);
    	public Dimension getMinimumSize() {
    		return MIN_SIZE;
    	}
    	
    	public Dimension getPreferredSize() {
    		return
    			null != image
    			? new Dimension((int) (scale * image.getWidth(null)), (int) (scale * image.getHeight(null)))
    			: MIN_SIZE;
    	}
    	
		public void paintComponent(Graphics g) {
			if (null == image) return;
			
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			
			float iscale = 1f / scale;
			Rectangle clip = g2.getClipBounds();
			Rectangle scaled = new Rectangle(
				(int) (iscale * clip.x),
				(int) (iscale * clip.y),
				(int) (iscale * clip.width),
				(int) (iscale * clip.height)
			);
			
			g2.drawImage(image,
				clip.x, clip.y, clip.x + clip.width, clip.y + clip.height,
				scaled.x, scaled.y, scaled.x + scaled.width, scaled.y + scaled.height,
				getBackground(), null);
		}
    }
}
