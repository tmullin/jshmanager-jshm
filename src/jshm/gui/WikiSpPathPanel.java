/*
 * -----LICENSE START-----
 * JSHManager - A Java-based tool for managing one's ScoreHero account.
 * Copyright (C) 2008, 2009 Tim Mullin
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * -----LICENSE END-----
*/
/*
 * WikiSpPathPanel.java
 *
 * Created on June 23, 2009, 4:52 PM
 */

package jshm.gui;

//import java.awt.Dimension;

import jshm.gui.renderers.ScoresCellRenderer;
import jshm.sh.scraper.wiki.SpPathScraper.PathInfo;

/**
 *
 * @author  Tim
 */
public class WikiSpPathPanel extends javax.swing.JPanel {
	private PathInfo pathInfo = null;
	
    /** Creates new form WikiSpPathPanel */
    public WikiSpPathPanel() {
        initComponents();
        
        EditPopupMenu.add(notesTextPane);
    }
	
    public void removeEditPopupMenu() {
    	EditPopupMenu.remove(notesTextPane);
    }
    
//    public Dimension getPreferredSize() {
//    	Dimension d = super.getPreferredSize();
//    	int dx = getWidth() - notesTextPane.getWidth();
//    	d.width = getMaxTextWidth() + dx;
//    	return d;
//    }
    
    public int getMaxTextWidth() {
    	return notesTextPane.getPreferredSize().width + getWidth() - notesTextPane.getWidth();
    }
    
	public void setPathInfo(PathInfo pi) {
		this.pathInfo = pi;
		
		if (null != pi.label) {
			titleLabel.setText(pi.label);
			titleLabel.setVisible(true);
		} else {
			titleLabel.setVisible(false);
		}
		
		if (0 != pi.score) {
			scoreLabel.setText(
				ScoresCellRenderer.NUM_FMT.format(pi.score));
			scoreLabel.setVisible(true);
			estScoreLabel.setVisible(true);
		} else {
			scoreLabel.setVisible(false);
			estScoreLabel.setVisible(false);
		}
		
		if (null != pi.image) {
			chartLink.setUrl(pi.image, true);
			chartLink.setVisible(true);
		} else {
			chartLink.setVisible(false);
		}
		
		if (null != pi.video) {
			videoLink.setUrl(pi.video);
			videoLink.setVisible(true);
		} else {
			videoLink.setVisible(false);
		}
		
		shortPathLabel.setText(pi.shortDescription);
		
		if (null != pi.credit && !pi.credit.isEmpty()) {
			creditedLabel.setText(pi.credit);
			creditedLabel.setVisible(true);
			creditLabel.setVisible(true);
		} else {
			creditedLabel.setVisible(false);
			creditLabel.setVisible(false);
		}
		
		if (null != pi.notes) {
			notesTextPane.setText(pi.notes);
			notesTextPane.setCaretPosition(0);
			notesScrollPane.setVisible(true);
		} else {
			notesScrollPane.setVisible(false);
		}
	}
	
	public PathInfo getPathInfo() {
		return pathInfo;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chartLink = new jshm.gui.components.Hyperlink();
        videoLink = new jshm.gui.components.Hyperlink();
        titleLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        estScoreLabel = new javax.swing.JLabel();
        shortPathLabel = new javax.swing.JLabel();
        creditedLabel = new javax.swing.JLabel();
        creditLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextPane = new javax.swing.JTextPane();

        chartLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jshm/resources/images/page.gif"))); // NOI18N
        chartLink.setText("");

        videoLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jshm/resources/images/video.gif"))); // NOI18N
        videoLink.setText("");

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+4));
        titleLabel.setText("The Path Title Here...");

        scoreLabel.setFont(scoreLabel.getFont().deriveFont(scoreLabel.getFont().getStyle() | java.awt.Font.BOLD, scoreLabel.getFont().getSize()+4));
        scoreLabel.setText("123456");

        estScoreLabel.setFont(estScoreLabel.getFont().deriveFont(estScoreLabel.getFont().getStyle() | java.awt.Font.BOLD, estScoreLabel.getFont().getSize()+4));
        estScoreLabel.setText("Est. Score:");

        shortPathLabel.setText("2(+2)-3(+2)-1(+1)");

        creditedLabel.setText("Credited");

        creditLabel.setText("Credit:");

        notesTextPane.setEditable(false);
        notesScrollPane.setViewportView(notesTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(estScoreLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scoreLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chartLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(videoLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shortPathLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(creditLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creditedLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(scoreLabel)
                    .addComponent(estScoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chartLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(videoLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shortPathLabel)
                        .addComponent(creditedLabel)
                        .addComponent(creditLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jshm.gui.components.Hyperlink chartLink;
    private javax.swing.JLabel creditLabel;
    private javax.swing.JLabel creditedLabel;
    private javax.swing.JLabel estScoreLabel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextPane notesTextPane;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel shortPathLabel;
    private javax.swing.JLabel titleLabel;
    private jshm.gui.components.Hyperlink videoLink;
    // End of variables declaration//GEN-END:variables

}
