/*
 * -----LICENSE START-----
 * JSHManager - A Java-based tool for managing one's ScoreHero account.
 * Copyright (C) 2008 Tim Mullin
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * -----LICENSE END-----
*/
/*
 * WhatToDownloadPage.java
 *
 * Created on September 21, 2008, 3:22 AM
 */

package jshm.gui.wizards.scoredownload;

import java.awt.Component;

import javax.swing.DefaultListModel;
import jshm.Difficulty;
import jshm.Game;
import jshm.GameTitle;
import jshm.Instrument;
import jshm.Platform;
import jshm.gh.GhGameTitle;
import jshm.wt.WtGameTitle;

import org.netbeans.spi.wizard.WizardController;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author  Tim
 */
public class WhatToDownloadPage extends WizardPage {
	GameTitle gameTitle;
	Platform platform;
	Instrument.Group group;
	Difficulty diff;
	
	public WhatToDownloadPage() {
		this(GhGameTitle.GH3, null, null, null);
	}
	
	public WhatToDownloadPage(Game game, Instrument.Group group, Difficulty diff) {
		this(game.title, game.platform, group, diff);
	}
	
    /** Creates new form WhatToDownloadPage */
    public WhatToDownloadPage(GameTitle gameTitle, Platform platform, Instrument.Group group, Difficulty diff) {
		super("whatToDownload", "What to download");
		setLongDescription("Select the combination of scores to download");
		
		this.gameTitle = gameTitle;
		this.platform = platform;
		this.group = group;
		this.diff = diff;
		
        initComponents();
        
        gameField.setText(String.valueOf(gameTitle));
        MyListCellRenderer renderer = new MyListCellRenderer(gameTitle instanceof WtGameTitle);
        platformList.setCellRenderer(renderer);
        setPlatformListModel();
        difficultyList.setCellRenderer(renderer);
        setDifficultyListModel();
        instrumentList.setCellRenderer(renderer);
        setInstrumentListModel();
    }

    protected String validateContents(final Component component, Object event) {
//    	if (component == platformList) {
    		if (platformList.getSelectedValues().length < 1)
    			return "You must select at least one platform.";
//    	} else if (component == difficultyList) {
    		if (difficultyList.getSelectedValues().length < 1)
    			return "You must select at least one difficulty.";
//    	} else if (component == instrumentList) {
    		if (instrumentList.getSelectedValues().length < 1)
    			return "You must select at least one instrument.";
//    	}
    	
    	setForwardNavigationMode(WizardController.MODE_CAN_CONTINUE_OR_FINISH);
    	return null;
    }
    
    
	private void setPlatformListModel() {
		DefaultListModel model = new DefaultListModel();

		for (Platform p : gameTitle.platforms) {
			model.addElement(p);
		}
		
		platformList.setModel(model);
		
		if (null != platform) {
			platformList.setSelectedValue(platform, true);
		}
	}
	
	private void setDifficultyListModel() {
		DefaultListModel model = new DefaultListModel();

		for (Difficulty d : Difficulty.values()) {
			if (Difficulty.CO_OP == d) continue;
			if (Difficulty.EXPERT_PLUS == d) {
				if (gameTitle instanceof WtGameTitle) {
					if (!((WtGameTitle) gameTitle).supportsExpertPlus)
						break;
				} else {
					break;
				}
			}
			
			model.addElement(d);
		}
		
		difficultyList.setModel(model);
		
		if (null != diff) {
			difficultyList.setSelectedValue(diff, true);
		}
	}
	
	private void setInstrumentListModel() {
		DefaultListModel model = new DefaultListModel();

		for (Instrument.Group g : gameTitle.getSupportedInstrumentGroups()) {
			model.addElement(g);
		}
		
		instrumentList.setModel(model);
		
		if (null != group) {
			instrumentList.setSelectedValue(group, true);
		}
		
		if (model.size() == 1) {
			instrumentList.setSelectedIndex(0);
			instrumentList.setEnabled(false);
		}
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        gameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        platformList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        difficultyList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        instrumentList = new javax.swing.JList();

        jLabel1.setText("Game:");

        gameField.setEditable(false);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Platforms"), javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5)));

        platformList.setName("platforms"); // NOI18N
        jScrollPane1.setViewportView(platformList);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Difficulties"), javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5)));

        difficultyList.setName("difficulties"); // NOI18N
        jScrollPane2.setViewportView(difficultyList);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Instruments"), javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5)));

        instrumentList.setName("instruments"); // NOI18N
        jScrollPane3.setViewportView(instrumentList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gameField, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList difficultyList;
    private javax.swing.JTextField gameField;
    private javax.swing.JList instrumentList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList platformList;
    // End of variables declaration//GEN-END:variables

}
