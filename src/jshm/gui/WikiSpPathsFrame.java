/*
 * WikiSpPathsFrame.java
 *
 * Created on June 23, 2009, 5:16 PM
 */

package jshm.gui;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.List;

import jshm.Difficulty;
import jshm.Instrument.Group;
import jshm.Song;
import jshm.sh.scraper.wiki.SpPathScraper.PathInfo;
import jshm.wt.WtSong;

/**
 *
 * @author  Tim
 */
public class WikiSpPathsFrame extends javax.swing.JFrame {

    /** Creates new form WikiSpPathsFrame */
    public WikiSpPathsFrame() {
        initComponents();
        
        jsp.getVerticalScrollBar().setUnitIncrement(50);
        jsp.getHorizontalScrollBar().setUnitIncrement(50);
    }

    public int getMaxTextWidth() {
    	int ret = 0;
    	
    	for (int i = pathsPanel.getComponentCount() - 1; i >= 0; i--) {
    		Component c = pathsPanel.getComponent(i);
    		if (c instanceof WikiSpPathPanel) {
    			WikiSpPathPanel cc = (WikiSpPathPanel) c;
    			
    			if (cc.getMaxTextWidth() > ret)
    				ret = cc.getMaxTextWidth();
    		}
    	}
    	
    	return Math.max(ret, pathsPanel.getWidth());
    }
    
    public void setLocationRelativeTo(Component c) {
    	// here i'm trying to resize the frame to be at most
    	// 75% the size of the main window. i want to make it as
    	// wide as possible to not have to wrap lines that aren't
    	// too long and i want to make it as short as necessary

    	Dimension size = pathsPanel.getPreferredSize();
//    	System.out.println("panel pref size = " + size);
    	Container cp = getContentPane();
//    	System.out.println("cp size = " + cp.getSize());
//    	System.out.println("frame size = " + this.getSize());
//    	System.out.println("max text width = " + getMaxTextWidth());
    	
    	size.width = getMaxTextWidth();
    	pathsPanel.setSize(size);
    	
    	Insets jspInsets = jsp.getInsets();
    	int vsbWidth =
    		jsp.getVerticalScrollBar().getPreferredSize().width +
    		jspInsets.left + jspInsets.right;
    	
    	size.width = Math.min(
    		null != c ? (int) (0.75f * c.getWidth()) : 800,
			size.width + vsbWidth
		);
    	size.height = Math.min(
    		size.height + jspInsets.top + jspInsets.bottom,
    		null != c ? (int) (0.75f * c.getHeight()) : 600
    	);
    	
//    	System.out.println("new cp pref size = " + size);
    	
    	cp.setPreferredSize(size);
    	
//    	System.out.println("new cp size = " + cp.getSize());
    	
    	pack();
    	
//    	System.out.println("new frame size = " + this.getSize());
    	super.setLocationRelativeTo(c);
    }
    
    public void dispose() {
    	for (int i = pathsPanel.getComponentCount() - 1; i >= 0; i--) {
    		Component c = pathsPanel.getComponent(i);
    		
    		if (c instanceof WikiSpPathPanel)
    			((WikiSpPathPanel) c).removeEditPopupMenu();
    	}
    			
    	super.dispose();
    }
    
	public void setSong(Song song, Group group, Difficulty diff) {
		setTitle(
			song.getTitle() + " - " +
			song.getActiveGame().title.getWikiAbbr() + " - " +
			group.getLongName(song instanceof WtSong) + " - " +
			diff.getLongName() + " - Wiki SP Paths"
		);
	}
	
	public void addPaths(List<PathInfo> paths) {
		for (PathInfo pi : paths)
			addPath(pi);
		pack();
	}
	
	public void addPath(PathInfo pi) {
		WikiSpPathPanel panel = new WikiSpPathPanel();
		panel.setPathInfo(pi);
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = GridBagConstraints.RELATIVE;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.anchor = GridBagConstraints.NORTH;
		c.weightx = 1.0;
		c.weighty = 0.0;
		pathsPanel.add(panel, c);
	}
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsp = new javax.swing.JScrollPane();
        pathsContainerPanel = new javax.swing.JPanel();
        pathsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pathsContainerPanel.setLayout(new java.awt.BorderLayout());

        pathsPanel.setLayout(new java.awt.GridBagLayout());
        pathsContainerPanel.add(pathsPanel, java.awt.BorderLayout.NORTH);

        jsp.setViewportView(pathsContainerPanel);

        getContentPane().add(jsp, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new WikiSpPathsFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jsp;
    private javax.swing.JPanel pathsContainerPanel;
    private javax.swing.JPanel pathsPanel;
    // End of variables declaration//GEN-END:variables

}
