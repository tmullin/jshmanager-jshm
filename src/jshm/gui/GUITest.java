/*
 * GUITest.java
 *
 * Created on August 10, 2008, 2:33 AM
 */

package jshm.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenuItem;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;

import jshm.gui.datamodels.*;

import org.jdesktop.swingx.treetable.TreeTableModel;

/**
 *
 * @author Tim Mullin
 */
public class GUITest extends javax.swing.JFrame {

    /** Creates new form GUITest */
    public GUITest() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDialog1 = new AboutDialog(this);
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTreeTable1 = new org.jdesktop.swingx.JXTreeTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        myScoresMenu = new javax.swing.JMenu();
        songDataMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jXTreeTable1.setColumnControlVisible(true);
        jXTreeTable1.setEditable(false);
        jXTreeTable1.setHorizontalScrollEnabled(true);
        jXTreeTable1.setOpenIcon(null);
        jXTreeTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jXTreeTable1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                jXTreeTable1TreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                jXTreeTable1TreeExpanded(evt);
            }
        });
        jScrollPane1.setViewportView(jXTreeTable1);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        myScoresMenu.setText("My Scores");
        initDynamicGameMenu(myScoresMenu);
        jMenuBar1.add(myScoresMenu);

        songDataMenu.setText("Song Data");
        initDynamicGameMenu(songDataMenu);
        jMenuBar1.add(songDataMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
	System.exit(0);
}//GEN-LAST:event_exitMenuItemActionPerformed

private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
	// this.aboutDialog1
	this.aboutDialog1.setLocationRelativeTo(null);
	this.aboutDialog1.setVisible(true);
}//GEN-LAST:event_aboutMenuItemActionPerformed

private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
//	try {
//		jXTreeTable1.packAll();
//	} catch (Exception e) {}
}//GEN-LAST:event_formComponentResized

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
	this.setLocationRelativeTo(null);
}//GEN-LAST:event_formWindowOpened

private void jXTreeTable1TreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jXTreeTable1TreeExpanded
	jXTreeTable1.packAll();
}//GEN-LAST:event_jXTreeTable1TreeExpanded

private void jXTreeTable1TreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jXTreeTable1TreeCollapsed
	jXTreeTable1.packAll();
}//GEN-LAST:event_jXTreeTable1TreeCollapsed

/**
 * Load the menu with all avaialable GH games.
 * @param menu
 */
private void initDynamicGameMenu(final javax.swing.JMenu menu) {
	java.util.List<jshm.GameTitle> titles =
		jshm.GameTitle.getTitlesBySeries(jshm.GameSeries.GUITAR_HERO);
	
	for (jshm.GameTitle ttl : titles) {		
		System.out.println("Creating " + ttl);
		
		javax.swing.JMenu ttlMenu = new javax.swing.JMenu(ttl.toString());
		ttlMenu.setIcon(ttl.getIcon());
		
		java.util.List<jshm.Game> games =
			jshm.Game.getByTitle(ttl);
		
		for (final jshm.Game game : games) {
			// no need for an extra menu if there's only one platform
			javax.swing.JMenu gameMenu = null;
				
			if (games.size() > 1) {
				gameMenu = new javax.swing.JMenu(game.platform.toString());
				gameMenu.setIcon(game.platform.getIcon());
			} else {
				gameMenu = ttlMenu;
			}
			
			System.out.println("  Creating " + game.platform);
			for (final jshm.Difficulty diff : jshm.Difficulty.values()) {
				if (diff == jshm.Difficulty.CO_OP) continue;
				
				System.out.println("    Creating " + diff);
				
				JMenuItem diffItem = new JMenuItem(diff.toString());
				diffItem.setIcon(diff.getIcon());
				
				ActionListener al = null;
				
				if (menu == songDataMenu) {
					al = new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							songDataMenuItemActionPerformed(e, (jshm.gh.GhGame) game, diff);
						}
					};
				} else if (menu == myScoresMenu) {
					al = new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							myScoresMenuItemActionPerformed(e, (jshm.gh.GhGame) game, diff);
						}
					};
				} else {
					assert false;
				}
				
				diffItem.addActionListener(al);
				
				gameMenu.add(diffItem);
			}
			
			ttlMenu.add(gameMenu);
		}
		
		menu.add(ttlMenu);
	}
}

private void songDataMenuItemActionPerformed(java.awt.event.ActionEvent evt, jshm.gh.GhGame game, jshm.Difficulty difficulty) {
	System.out.println("Menu Evt: " + evt + "\n" + game + "," + difficulty);
	
	java.util.List<jshm.gh.GhSong> songs = jshm.gh.GhSong.getSongs(game, difficulty);
	
	if (songs.size() == 0) {
		javax.swing.JOptionPane.showMessageDialog(this, "No songs for " + game + " on " + difficulty, "Error", javax.swing.JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	GhSongDataTreeTableModel model = new GhSongDataTreeTableModel(game, songs);
	jXTreeTable1.setTreeTableModel(model);
	model.setParent(jXTreeTable1);
}

private void myScoresMenuItemActionPerformed(java.awt.event.ActionEvent evt, jshm.gh.GhGame game, jshm.Difficulty difficulty) {
	System.out.println("Menu Evt: " + evt + "\n" + game + "," + difficulty);
	
	java.util.List<jshm.gh.GhSong> songs = jshm.gh.GhSong.getSongs(game, difficulty);
	java.util.List<jshm.gh.GhScore> scores = jshm.gh.GhScore.getScores(game, difficulty);
	
	if (scores.size() == 0) {
		javax.swing.JOptionPane.showMessageDialog(this, "No scores for " + game + " on " + difficulty, "Error", javax.swing.JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	GhMyScoresTreeTableModel model = new GhMyScoresTreeTableModel(game, songs, scores);
	jXTreeTable1.setTreeTableModel(model);
	model.setParent(jXTreeTable1);
}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
				try {
					// Set the Look & Feel to match the current system
					UIManager.setLookAndFeel(
						UIManager.getSystemLookAndFeelClassName());
				} catch (Exception e) {
					System.out.println("Couldn't set system look & feel (not fatal)");
				}
				
                new GUITest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jshm.gui.AboutDialog aboutDialog1;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTreeTable jXTreeTable1;
    private javax.swing.JMenu myScoresMenu;
    private javax.swing.JMenu songDataMenu;
    // End of variables declaration//GEN-END:variables

}
