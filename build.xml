<?xml version="1.0" encoding="UTF-8"?>

<project default="all" name="JSHManager" basedir=".">
	<property name="dist_dir" value="${basedir}/dist"/>
	<property name="bin_dir" value="${basedir}/bin"/>
	<property name="src_dir" value="${basedir}/src"/>
	<property name="internal_src_dir" value="${basedir}/internal"/>
	<property name="test_src_dir" value="${basedir}/test"/>
	<property name="test_bin_dir" value="${basedir}/test_bin"/>
	<property name="lib_dir" value="${basedir}/lib"/>
	<property name="internal_lib_dir" value="${basedir}/internal_lib"/>
	<property name="launch4j_dir" value="${internal_lib_dir}/launch4j"/>
	
	<path id="classpath">
		<fileset id="libs" dir="${lib_dir}" includes="**/*.jar"/>
	</path>
	
	<path id="internal_classpath">
		<fileset id="internal_libs" dir="${internal_lib_dir}" includes="**/*.jar"/>
	</path>
	
	
	<target name="all" depends="clean,dist"/>
	
	<target name="checkos">
		<condition property="isWindows">
			<os family="Windows" />
		</condition>
	</target>

	<target name="dist" depends="run-tests,distfiles,jar,exewrapper"> <!-- ,patch -->
		<zip destfile="${dist_dir}/${jshm.name}-${jshm.version}.zip">
			<fileset 
				dir="${dist_dir}"
				includes="**"
				excludes="*.exe,${jshm.name}-patch-*.jar"/>
		</zip>
		
		<!-- 7z a -bd -sfx7z.sfx out.exe *.txt *.jar Licenses/* -->
		<exec executable="cmd" osfamily="Windows" dir="${dist_dir}">
			<arg value="/c"/>
			<arg value="7z"/>
			<arg value="a"/>
			<arg value="-bd"/>
			<arg value="-sfx7z.sfx"/>
			<arg value="-x!${jshm.name}-patch-*.jar"/>
			<arg value="${jshm.name}-${jshm.version}.exe"/>
			<arg value="*.txt"/>
			<arg value="*.exe"/>
			<arg value="*.jar"/>
			<arg value="Licenses\*"/>
		</exec>
	</target>
	
	<target name="distfiles">
		<mkdir dir="${dist_dir}"/>
		
		<copy todir="${dist_dir}">
			<fileset dir="${basedir}" includes="*.txt"/>
		</copy>
		<copy todir="${dist_dir}/Licenses">
			<fileset dir="${basedir}/Licenses" includes="**"/>
		</copy>
	</target>
	
	<target name="jshminfo">
		<taskdef 
			name="jshminfo" 
			classname="jshm.internal.tasks.JshmVersion" 
			classpath="${bin_dir}"/>
		<jshminfo/>
	</target>
	
	<target name="patch" depends="compile,jshminfo,distfiles">
		<mkdir dir="${dist_dir}"/>
		
		<!-- 
		destfile="${dist_dir}/${jshm.name}-patch-${jshm.last_version}-to-${jshm.version}.jar" 
		-->
		
		<!-- unzipping for changed/new libs, comment if not needed 
		<unzip 
			src="${lib_dir}/opencsv-1.8.jar"
			dest="${bin_dir}">
			<patternset>
				<include name="**/*.class"/>
				<exclude name="META-INF/"/>
			</patternset>
		</unzip>
		-->
		
		<jar
			destfile="${dist_dir}/${jshm.name}-patch-${jshm.last_version}-to-${jshm.version}.jar"
			compress="true">
			
			<!-- the patcher program itself -->
			<fileset
				dir="${bin_dir}"
				includes="jshm/internal/patcher/**,jshm/logging/**,jshm/util/Properties*.class,jshm/util/Exec*.class"
				excludes="jshm/internal/patcher/SvnDiff*.class,jshm/internal/patcher/*.txt"/>
			
			<!-- the set of changed files within JSHManager.jar -->
			<zipfileset
				dir="${bin_dir}"
				prefix="jar">
				<includesfile name="${internal_src_dir}/jshm/internal/patcher/ChangedJarFiles.txt"/>
			</zipfileset>
			
			<!-- the set of changed files in the program folder -->
			<zipfileset
				dir="${dist_dir}"
				prefix="folder">
				<includesfile name="${internal_src_dir}/jshm/internal/patcher/ChangedFolderFiles.txt"/>
			</zipfileset>
			
			<manifest>
				<attribute name="Main-Class" value="jshm.internal.patcher.Patcher"/>
			</manifest>
		</jar>
	</target>
	
	<target name="exewrapper" depends="checkos,jar,jshminfo,distfiles" if="isWindows">
		<taskdef name="launch4j"
			classname="net.sf.launch4j.ant.Launch4jTask"
			classpath="${launch4j_dir}/launch4j.jar:${launch4j_dir}/lib/xstream.jar" />
		<launch4j
			configfile="${basedir}/launch4j.xml"
			productversion="${jshm.major_version}.${jshm.minor_version}.${jshm.point_version}.${jshm.revision}"
			txtproductversion="${jshm.version}"
			fileversion="${jshm.major_version}.${jshm.minor_version}.${jshm.point_version}.${jshm.revision}"
			txtfileversion="${jshm.version}"/>
	</target>
	
	<target name="jar" depends="compile,jshminfo">
		<mkdir dir="${dist_dir}"/>
		
		<jar 
			destfile="${dist_dir}/${jshm.name}.jar" 
			compress="true">
			
			<zipgroupfileset dir="${lib_dir}" includes="**/*.jar"/>
			
			<fileset 
				dir="${bin_dir}" 
				includes="jshm/**" 
				excludes="jshm/concepts/**,jshm/internal/**"/>
			
			<manifest>
				<attribute name="Main-Class" value="jshm.JSHManager"/>
				<attribute name="SplashScreen-Image" value="jshm/resources/images/splash.png"/>

				<section name="jshm">
					<attribute name="Specification-Title" value="${jshm.name}"/>
					<attribute name="Specification-Version" value="${jshm.version}"/>
				</section>
			</manifest>
		</jar>
		
		<!-- get rid of the extra files from zipgroupfileset's shortcomings... -->
		<zip destfile="${dist_dir}/tmp.jar">
			<zipfileset
				src="${dist_dir}/${jshm.name}.jar"
				includes="antlr/**,javassist/**,javax/**,jshm/**,net/**,org/**,au/**,META-INF/MANIFEST.MF"/>
		</zip>
		<move file="${dist_dir}/tmp.jar" tofile="${dist_dir}/${jshm.name}.jar"/>
	</target>
	
	<target name="compile" depends="resources">
		<javac destdir="${bin_dir}" debug="true">
			<src path="${src_dir}"/>
			<src path="${internal_src_dir}"/>
			<include name="**"/>
			<classpath refid="classpath"/>
		</javac>
		
		<!-- this should compile the main class for 1.5 so that
		     the user would see an error dialog instead of just an exception.
		     1.4 users are SOL i guess :p -->
		<delete file="${bin_dir}/jshm/JSHManager.class"/>
		<javac destdir="${bin_dir}" target="1.5">
			<src path="${src_dir}"/>
			<include name="jshm/JSHManager.java"/>
			<classpath refid="classpath"/>
		</javac>
	</target>
	
	<target name="run-tests" description="Execute unit tests" depends="compile-tests">
		<mkdir dir="${test_bin_dir}/rawtestoutput"/>
		
		<junit printsummary="true" failureproperty="junit.failure">
			<classpath>
				<path refid="classpath"/>
				<path refid="internal_classpath"/>
				<pathelement path="${test_bin_dir}"/>
				<pathelement path="${bin_dir}"/>
			</classpath>
			
			<batchtest todir="${test_bin_dir}/rawtestoutput">
				<fileset dir="${test_bin_dir}"/>
				<formatter type="xml"/>
			</batchtest>
		</junit>
		
		<fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
		
		<junitreport todir="${test_bin_dir}">
			<fileset dir="${test_bin_dir}/rawtestoutput"/>
			<report todir="${test_bin_dir}/test-reports"/>
		</junitreport>
	</target>
	
	<target name="compile-tests" depends="compile">
		<mkdir dir="${test_bin_dir}"/>
		
		<javac destdir="${test_bin_dir}" debug="true">
			<src path="${test_src_dir}"/>
			<include name="**"/>
			<classpath>
				<path refid="classpath"/>
				<path refid="internal_classpath"/>
				<pathelement path="${bin_dir}"/>
			</classpath>
		</javac>
	</target>
	
	<target name="resources">
		<mkdir dir="${bin_dir}"/>
		<copy todir="${bin_dir}/jshm/resources">
			<fileset
				dir="${src_dir}/jshm/resources" 
				excludes="**/*_64.png,**/*.svg,**/*.pdn,**/*.psd,**/psd/**,**/64/**"/>
		</copy>
		<copy todir="${bin_dir}/jshm/properties">
			<fileset
				dir="${src_dir}/jshm/properties"/>
		</copy>
		<copy todir="${bin_dir}/jshm/hibernate">
			<fileset
				dir="${src_dir}/jshm/hibernate"
				includes="hibernate.cfg.xml"/>
		</copy>
		<copy todir="${bin_dir}/jshm/internal/patcher">
			<fileset
				dir="${internal_src_dir}/jshm/internal/patcher"
				includes="*.properties"/>
		</copy>
	</target>
	
	<target name="clean">
		<delete dir="${dist_dir}"/>
		<delete dir="${bin_dir}"/>
		<delete dir="${test_bin_dir}"/>
	</target>
</project>